openapi: 3.0.0
info:
  title: Gmail API
  description: The Gmail API lets you view and manage Gmail mailbox data like
    threads, messages, and labels.
  version: v1
  contact:
    url: https://developers.google.com/gmail/api/
servers:
  - url: https://gmail.googleapis.com/
    description: Production server
paths:
  /gmail/v1/users/{userId}/profile:
    get:
      operationId: users.gmail.users.getProfile
      description: Gets the current user's Gmail profile.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/watch:
    post:
      operationId: users.gmail.users.watch
      description: Set up or update a push notification watch on the given user mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WatchResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WatchRequest"
        required: true
  /gmail/v1/users/{userId}/stop:
    post:
      operationId: users.gmail.users.stop
      description: Stop receiving push notifications for the given user mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/drafts/{id}:
    delete:
      operationId: users.drafts.gmail.users.drafts.delete
      description: Immediately and permanently deletes the specified draft. Does not
        simply trash it.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the draft to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.action.compose
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
    get:
      operationId: users.drafts.gmail.users.drafts.get
      description: Gets the specified draft.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the draft to retrieve.
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: The format to return the draft in.
          schema:
            type: string
            default: full
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Draft"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
    put:
      operationId: users.drafts.gmail.users.drafts.update
      description: Replaces a draft's content.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the draft to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Draft"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.action.compose
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Draft"
        required: true
  /gmail/v1/users/{userId}/drafts:
    post:
      operationId: users.drafts.gmail.users.drafts.create
      description: Creates a new draft with the `DRAFT` label.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Draft"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.action.compose
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Draft"
        required: true
    get:
      operationId: users.drafts.gmail.users.drafts.list
      description: Lists the drafts in the user's mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: maxResults
          in: query
          description: Maximum number of drafts to return. This field defaults to 100. The
            maximum allowed value for this field is 500.
          schema:
            type: integer
            default: "100"
        - name: pageToken
          in: query
          description: Page token to retrieve a specific page of results in the list.
          schema:
            type: string
        - name: q
          in: query
          description: 'Only return draft messages matching the specified query. Supports
            the same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`.'
          schema:
            type: string
        - name: includeSpamTrash
          in: query
          description: Include drafts from `SPAM` and `TRASH` in the results.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDraftsResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/drafts/send:
    post:
      operationId: users.drafts.gmail.users.drafts.send
      description: Sends the specified, existing draft to the recipients in the `To`,
        `Cc`, and `Bcc` headers.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.action.compose
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Draft"
        required: true
  /gmail/v1/users/{userId}/history:
    get:
      operationId: users.history.gmail.users.history.list
      description: Lists the history of all changes to the given mailbox. History
        results are returned in chronological order (increasing `historyId`).
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: maxResults
          in: query
          description: Maximum number of history records to return. This field defaults to
            100. The maximum allowed value for this field is 500.
          schema:
            type: integer
            default: "100"
        - name: pageToken
          in: query
          description: Page token to retrieve a specific page of results in the list.
          schema:
            type: string
        - name: startHistoryId
          in: query
          description: Required. Returns history records after the specified
            `startHistoryId`. The supplied `startHistoryId` should be obtained
            from the `historyId` of a message, thread, or previous `list`
            response. History IDs increase chronologically but are not
            contiguous with random gaps in between valid IDs. Supplying an
            invalid or out of date `startHistoryId` typically returns an `HTTP
            404` error code. A `historyId` is typically valid for at least a
            week, but in some rare circumstances may be valid for only a few
            hours. If you receive an `HTTP 404` error response, your application
            should perform a full sync. If you receive no `nextPageToken` in the
            response, there are no updates to retrieve and you can store the
            returned `historyId` for a future request.
          schema:
            type: string
        - name: labelId
          in: query
          description: Only return messages with a label matching the ID.
          schema:
            type: string
        - name: historyTypes
          in: query
          description: History types to be returned by the function
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListHistoryResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/messages/{id}/trash:
    post:
      operationId: users.messages.gmail.users.messages.trash
      description: Moves the specified message to the trash.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the message to Trash.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
  /gmail/v1/users/{userId}/messages/{id}/untrash:
    post:
      operationId: users.messages.gmail.users.messages.untrash
      description: Removes the specified message from the trash.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the message to remove from Trash.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
  /gmail/v1/users/{userId}/messages/{id}:
    delete:
      operationId: users.messages.gmail.users.messages.delete
      description: Immediately and permanently deletes the specified message. This
        operation cannot be undone. Prefer `messages.trash` instead.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the message to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
    get:
      operationId: users.messages.gmail.users.messages.get
      description: Gets the specified message.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the message to retrieve. This ID is usually retrieved
            using `messages.list`. The ID is also contained in the result when a
            message is inserted (`messages.insert`) or imported
            (`messages.import`).
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: The format to return the message in.
          schema:
            type: string
            default: full
        - name: metadataHeaders
          in: query
          description: When given and format is `METADATA`, only include headers specified.
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.message.action
            - https://www.googleapis.com/auth/gmail.addons.current.message.metadata
            - https://www.googleapis.com/auth/gmail.addons.current.message.readonly
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/messages/batchDelete:
    post:
      operationId: users.messages.gmail.users.messages.batchDelete
      description: Deletes many messages by message ID. Provides no guarantees that
        messages were not already deleted or even existed at all.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchDeleteMessagesRequest"
        required: true
  /gmail/v1/users/{userId}/messages/import:
    post:
      operationId: users.messages.gmail.users.messages.import
      description: Imports a message into only this user's mailbox, with standard
        email delivery scanning and classification similar to receiving via
        SMTP. This method doesn't perform SPF checks, so it might not work for
        some spam messages, such as those attempting to perform domain spoofing.
        This method does not send a message.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: internalDateSource
          in: query
          description: Source for Gmail's internal date of the message.
          schema:
            type: string
            default: dateHeader
        - name: neverMarkSpam
          in: query
          description: Ignore the Gmail spam classifier decision and never mark this email
            as SPAM in the mailbox.
          schema:
            type: boolean
            default: "false"
        - name: processForCalendar
          in: query
          description: Process calendar invites in the email and add any extracted
            meetings to the Google Calendar for this user.
          schema:
            type: boolean
            default: "false"
        - name: deleted
          in: query
          description: Mark the email as permanently deleted (not TRASH) and only visible
            in Google Vault to a Vault administrator. Only used for Google
            Workspace accounts.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.insert
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
  /gmail/v1/users/{userId}/messages:
    post:
      operationId: users.messages.gmail.users.messages.insert
      description: Directly inserts a message into only this user's mailbox similar to
        `IMAP APPEND`, bypassing most scanning and classification. Does not send
        a message.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: internalDateSource
          in: query
          description: Source for Gmail's internal date of the message.
          schema:
            type: string
            default: receivedTime
        - name: deleted
          in: query
          description: Mark the email as permanently deleted (not TRASH) and only visible
            in Google Vault to a Vault administrator. Only used for Google
            Workspace accounts.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.insert
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
    get:
      operationId: users.messages.gmail.users.messages.list
      description: Lists the messages in the user's mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: maxResults
          in: query
          description: Maximum number of messages to return. This field defaults to 100.
            The maximum allowed value for this field is 500.
          schema:
            type: integer
            default: "100"
        - name: pageToken
          in: query
          description: Page token to retrieve a specific page of results in the list.
          schema:
            type: string
        - name: q
          in: query
          description: 'Only return messages matching the specified query. Supports the
            same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter
            cannot be used when accessing the api using the gmail.metadata
            scope.'
          schema:
            type: string
        - name: labelIds
          in: query
          description: Only return messages with labels that match all of the specified
            label IDs. Messages in a thread might have labels that other
            messages in the same thread don't have. To learn more, see [Manage
            labels on messages and
            threads](https://developers.google.com/gmail/api/guides/labels#manage_labels_on_messages_threads).
          schema:
            type: string
        - name: includeSpamTrash
          in: query
          description: Include messages from `SPAM` and `TRASH` in the results.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListMessagesResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/messages/send:
    post:
      operationId: users.messages.gmail.users.messages.send
      description: Sends the specified message to the recipients in the `To`, `Cc`,
        and `Bcc` headers. For example usage, see [Sending
        email](https://developers.google.com/gmail/api/guides/sending).
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.action.compose
            - https://www.googleapis.com/auth/gmail.compose
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.send
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Message"
        required: true
  /gmail/v1/users/{userId}/messages/{id}/modify:
    post:
      operationId: users.messages.gmail.users.messages.modify
      description: Modifies the labels on the specified message.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the message to modify.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Message"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyMessageRequest"
        required: true
  /gmail/v1/users/{userId}/messages/batchModify:
    post:
      operationId: users.messages.gmail.users.messages.batchModify
      description: Modifies the labels on the specified messages.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BatchModifyMessagesRequest"
        required: true
  /gmail/v1/users/{userId}/messages/{messageId}/attachments/{id}:
    get:
      operationId: users.messages.attachments.gmail.users.messages.attachments.get
      description: Gets the specified message attachment.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: messageId
          in: path
          description: The ID of the message containing the attachment.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The ID of the attachment.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessagePartBody"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.message.action
            - https://www.googleapis.com/auth/gmail.addons.current.message.readonly
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/labels:
    post:
      operationId: users.labels.gmail.users.labels.create
      description: Creates a new label.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
        required: true
    get:
      operationId: users.labels.gmail.users.labels.list
      description: Lists all labels in the user's mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListLabelsResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/labels/{id}:
    delete:
      operationId: users.labels.gmail.users.labels.delete
      description: Immediately and permanently deletes the specified label and removes
        it from any messages and threads that it is applied to.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the label to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.modify
    get:
      operationId: users.labels.gmail.users.labels.get
      description: Gets the specified label.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the label to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
    put:
      operationId: users.labels.gmail.users.labels.update
      description: Updates the specified label.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the label to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
        required: true
    patch:
      operationId: users.labels.gmail.users.labels.patch
      description: Patch the specified label.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the label to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Label"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.labels
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
        required: true
  /gmail/v1/users/{userId}/threads/{id}/trash:
    post:
      operationId: users.threads.gmail.users.threads.trash
      description: Moves the specified thread to the trash. Any messages that belong
        to the thread are also moved to the trash.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the thread to Trash.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
  /gmail/v1/users/{userId}/threads/{id}/untrash:
    post:
      operationId: users.threads.gmail.users.threads.untrash
      description: Removes the specified thread from the trash. Any messages that
        belong to the thread are also removed from the trash.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the thread to remove from Trash.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
  /gmail/v1/users/{userId}/threads/{id}:
    delete:
      operationId: users.threads.gmail.users.threads.delete
      description: Immediately and permanently deletes the specified thread. Any
        messages that belong to the thread are also deleted. This operation
        cannot be undone. Prefer `threads.trash` instead.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: ID of the Thread to delete.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
    get:
      operationId: users.threads.gmail.users.threads.get
      description: Gets the specified thread.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the thread to retrieve.
          required: true
          schema:
            type: string
        - name: format
          in: query
          description: The format to return the messages in.
          schema:
            type: string
            default: full
        - name: metadataHeaders
          in: query
          description: When given and format is METADATA, only include headers specified.
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.addons.current.message.action
            - https://www.googleapis.com/auth/gmail.addons.current.message.metadata
            - https://www.googleapis.com/auth/gmail.addons.current.message.readonly
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/threads:
    get:
      operationId: users.threads.gmail.users.threads.list
      description: Lists the threads in the user's mailbox.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: maxResults
          in: query
          description: Maximum number of threads to return. This field defaults to 100.
            The maximum allowed value for this field is 500.
          schema:
            type: integer
            default: "100"
        - name: pageToken
          in: query
          description: Page token to retrieve a specific page of results in the list.
          schema:
            type: string
        - name: q
          in: query
          description: 'Only return threads matching the specified query. Supports the
            same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`. Parameter
            cannot be used when accessing the api using the gmail.metadata
            scope.'
          schema:
            type: string
        - name: labelIds
          in: query
          description: Only return threads with labels that match all of the specified
            label IDs.
          schema:
            type: string
        - name: includeSpamTrash
          in: query
          description: Include threads from `SPAM` and `TRASH` in the results.
          schema:
            type: boolean
            default: "false"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListThreadsResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.metadata
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
  /gmail/v1/users/{userId}/threads/{id}/modify:
    post:
      operationId: users.threads.gmail.users.threads.modify
      description: Modifies the labels applied to the thread. This applies to all
        messages in the thread.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the thread to modify.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ModifyThreadRequest"
        required: true
  /gmail/v1/users/{userId}/settings/imap:
    get:
      operationId: users.settings.gmail.users.settings.getImap
      description: Gets IMAP settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImapSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.gmail.users.settings.updateImap
      description: Updates IMAP settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImapSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ImapSettings"
        required: true
  /gmail/v1/users/{userId}/settings/pop:
    get:
      operationId: users.settings.gmail.users.settings.getPop
      description: Gets POP settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PopSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.gmail.users.settings.updatePop
      description: Updates POP settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PopSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PopSettings"
        required: true
  /gmail/v1/users/{userId}/settings/vacation:
    get:
      operationId: users.settings.gmail.users.settings.getVacation
      description: Gets vacation responder settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.gmail.users.settings.updateVacation
      description: Updates vacation responder settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VacationSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VacationSettings"
        required: true
  /gmail/v1/users/{userId}/settings/language:
    get:
      operationId: users.settings.gmail.users.settings.getLanguage
      description: Gets language settings.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.gmail.users.settings.updateLanguage
      description: Updates language settings. If successful, the return object
        contains the `displayLanguage` that was saved for the user, which may
        differ from the value passed into the request. This is because the
        requested `displayLanguage` may not be directly supported by Gmail but
        have a close variant that is, and so the variant may be chosen and saved
        instead.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LanguageSettings"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LanguageSettings"
        required: true
  /gmail/v1/users/{userId}/settings/autoForwarding:
    get:
      operationId: users.settings.gmail.users.settings.getAutoForwarding
      description: Gets the auto-forwarding setting for the specified account.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoForwarding"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.gmail.users.settings.updateAutoForwarding
      description: Updates the auto-forwarding setting for the specified account. A
        verified forwarding address must be specified when auto-forwarding is
        enabled. This method is only available to service account clients that
        have been delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AutoForwarding"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AutoForwarding"
        required: true
  /gmail/v1/users/{userId}/settings/sendAs:
    get:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.list
      description: Lists the send-as aliases for the specified account. The result
        includes the primary send-as address associated with the account as well
        as any custom "from" aliases.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSendAsResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    post:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.create
      description: Creates a custom "from" send-as alias. If an SMTP MSA is specified,
        Gmail will attempt to connect to the SMTP service to validate the
        configuration before creating the alias. If ownership verification is
        required for the alias, a message will be sent to the email address and
        the resource's verification status will be set to `pending`; otherwise,
        the resource will be created with verification status set to `accepted`.
        If a signature is provided, Gmail will sanitize the HTML before saving
        it with the alias. This method is only available to service account
        clients that have been delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendAs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendAs"
        required: true
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}:
    get:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.get
      description: Gets the specified send-as alias. Fails with an HTTP 404 error if
        the specified address is not a member of the collection.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The send-as alias to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendAs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    put:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.update
      description: Updates a send-as alias. If a signature is provided, Gmail will
        sanitize the HTML before saving it with the alias. Addresses other than
        the primary address for the account can only be updated by service
        account clients that have been delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The send-as alias to be updated.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendAs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendAs"
        required: true
    patch:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.patch
      description: Patch the specified send-as alias.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The send-as alias to be updated.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendAs"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendAs"
        required: true
    delete:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.delete
      description: Deletes the specified send-as alias. Revokes any verification that
        may have been required for using it. This method is only available to
        service account clients that have been delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The send-as alias to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/verify:
    post:
      operationId: users.settings.sendAs.gmail.users.settings.sendAs.verify
      description: Sends a verification email to the specified send-as alias address.
        The verification status must be `pending`. This method is only available
        to service account clients that have been delegated domain-wide
        authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The send-as alias to be verified.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo:
    get:
      operationId: users.settings.sendAs.smimeInfo.gmail.users.settings.sendAs.smimeInfo.list
      description: Lists S/MIME configs for the specified send-as alias.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The email address that appears in the "From:" header for mail sent
            using this alias.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListSmimeInfoResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
    post:
      operationId: users.settings.sendAs.smimeInfo.gmail.users.settings.sendAs.smimeInfo.insert
      description: Insert (upload) the given S/MIME config for the specified send-as
        alias. Note that pkcs12 format is required for the key.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The email address that appears in the "From:" header for mail sent
            using this alias.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmimeInfo"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SmimeInfo"
        required: true
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}:
    get:
      operationId: users.settings.sendAs.smimeInfo.gmail.users.settings.sendAs.smimeInfo.get
      description: Gets the specified S/MIME config for the specified send-as alias.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The email address that appears in the "From:" header for mail sent
            using this alias.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The immutable ID for the SmimeInfo.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SmimeInfo"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
    delete:
      operationId: users.settings.sendAs.smimeInfo.gmail.users.settings.sendAs.smimeInfo.delete
      description: Deletes the specified S/MIME config for the specified send-as alias.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The email address that appears in the "From:" header for mail sent
            using this alias.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The immutable ID for the SmimeInfo.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/sendAs/{sendAsEmail}/smimeInfo/{id}/setDefault:
    post:
      operationId: users.settings.sendAs.smimeInfo.gmail.users.settings.sendAs.smimeInfo.setDefault
      description: Sets the default S/MIME config for the specified send-as alias.
      parameters:
        - name: userId
          in: path
          description: The user's email address. The special value `me` can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: sendAsEmail
          in: path
          description: The email address that appears in the "From:" header for mail sent
            using this alias.
          required: true
          schema:
            type: string
        - name: id
          in: path
          description: The immutable ID for the SmimeInfo.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/cse/identities:
    post:
      operationId: users.settings.cse.identities.gmail.users.settings.cse.identities.create
      description: Creates and configures a client-side encryption identity that's
        authorized to send mail from the user account. Google publishes the
        S/MIME certificate to a shared domain-wide directory so that people
        within a Google Workspace organization can encrypt and send mail to the
        identity.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseIdentity"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CseIdentity"
        required: true
    get:
      operationId: users.settings.cse.identities.gmail.users.settings.cse.identities.list
      description: Lists the client-side encrypted identities for an authenticated user.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: pageToken
          in: query
          description: Pagination token indicating which page of identities to return. If
            the token is not supplied, then the API will return the first page
            of results.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The number of identities to return. If not provided, the page size
            will default to 20 entries.
          schema:
            type: integer
            default: "20"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCseIdentitiesResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/cse/identities/{cseEmailAddress}:
    delete:
      operationId: users.settings.cse.identities.gmail.users.settings.cse.identities.delete
      description: Deletes a client-side encryption identity. The authenticated user
        can no longer use the identity to send encrypted messages. You cannot
        restore the identity after you delete it. Instead, use the
        CreateCseIdentity method to create another identity with the same
        configuration.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: cseEmailAddress
          in: path
          description: The primary email address associated with the client-side
            encryption identity configuration that's removed.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
    get:
      operationId: users.settings.cse.identities.gmail.users.settings.cse.identities.get
      description: Retrieves a client-side encryption identity configuration.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: cseEmailAddress
          in: path
          description: The primary email address associated with the client-side
            encryption identity configuration that's retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseIdentity"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/cse/identities/{emailAddress}:
    patch:
      operationId: users.settings.cse.identities.gmail.users.settings.cse.identities.patch
      description: Associates a different key pair with an existing client-side
        encryption identity. The updated key pair must validate against Google's
        [S/MIME certificate
        profiles](https://support.google.com/a/answer/7300887).
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: emailAddress
          in: path
          description: The email address of the client-side encryption identity to update.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseIdentity"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CseIdentity"
        required: true
  /gmail/v1/users/{userId}/settings/cse/keypairs:
    post:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.create
      description: Creates and uploads a client-side encryption S/MIME public key
        certificate chain and private key metadata for the authenticated user.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseKeyPair"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CseKeyPair"
        required: true
    get:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.list
      description: Lists client-side encryption key pairs for an authenticated user.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: pageToken
          in: query
          description: Pagination token indicating which page of key pairs to return. If
            the token is not supplied, then the API will return the first page
            of results.
          schema:
            type: string
        - name: pageSize
          in: query
          description: The number of key pairs to return. If not provided, the page size
            will default to 20 entries.
          schema:
            type: integer
            default: "20"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListCseKeyPairsResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:disable:
    post:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.disable
      description: Turns off a client-side encryption key pair. The authenticated user
        can no longer use the key pair to decrypt incoming CSE message texts or
        sign outgoing CSE mail. To regain access, use the EnableCseKeyPair to
        turn on the key pair. After 30 days, you can permanently delete the key
        pair by using the ObliterateCseKeyPair method.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: keyPairId
          in: path
          description: The identifier of the key pair to turn off.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseKeyPair"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DisableCseKeyPairRequest"
        required: true
  /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:enable:
    post:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.enable
      description: Turns on a client-side encryption key pair that was turned off. The
        key pair becomes active again for any associated client-side encryption
        identities.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: keyPairId
          in: path
          description: The identifier of the key pair to turn on.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseKeyPair"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EnableCseKeyPairRequest"
        required: true
  /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:
    get:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.get
      description: Retrieves an existing client-side encryption key pair.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: keyPairId
          in: path
          description: The identifier of the key pair to retrieve.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CseKeyPair"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/cse/keypairs/{keyPairId}:obliterate:
    post:
      operationId: users.settings.cse.keypairs.gmail.users.settings.cse.keypairs.obliterate
      description: Deletes a client-side encryption key pair permanently and
        immediately. You can only permanently delete key pairs that have been
        turned off for more than 30 days. To turn off a key pair, use the
        DisableCseKeyPair method. Gmail can't restore or decrypt any messages
        that were encrypted by an obliterated key. Authenticated users and
        Google Workspace administrators lose access to reading the encrypted
        messages.
      parameters:
        - name: userId
          in: path
          description: The requester's primary email address. To indicate the
            authenticated user, you can use the special value `me`.
          required: true
          schema:
            type: string
            default: me
        - name: keyPairId
          in: path
          description: The identifier of the key pair to obliterate.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ObliterateCseKeyPairRequest"
        required: true
  /gmail/v1/users/{userId}/settings/filters:
    get:
      operationId: users.settings.filters.gmail.users.settings.filters.list
      description: Lists the message filters of a Gmail user.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListFiltersResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    post:
      operationId: users.settings.filters.gmail.users.settings.filters.create
      description: "Creates a filter. Note: you can only create a maximum of 1,000 filters."
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Filter"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Filter"
        required: true
  /gmail/v1/users/{userId}/settings/filters/{id}:
    get:
      operationId: users.settings.filters.gmail.users.settings.filters.get
      description: Gets a filter.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the filter to be fetched.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Filter"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    delete:
      operationId: users.settings.filters.gmail.users.settings.filters.delete
      description: Immediately and permanently deletes the specified filter.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: id
          in: path
          description: The ID of the filter to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.basic
  /gmail/v1/users/{userId}/settings/forwardingAddresses:
    get:
      operationId: users.settings.forwardingAddresses.gmail.users.settings.forwardingAddresses.list
      description: Lists the forwarding addresses for the specified account.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListForwardingAddressesResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    post:
      operationId: users.settings.forwardingAddresses.gmail.users.settings.forwardingAddresses.create
      description: Creates a forwarding address. If ownership verification is
        required, a message will be sent to the recipient and the resource's
        verification status will be set to `pending`; otherwise, the resource
        will be created with verification status set to `accepted`. This method
        is only available to service account clients that have been delegated
        domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForwardingAddress"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ForwardingAddress"
        required: true
  /gmail/v1/users/{userId}/settings/forwardingAddresses/{forwardingEmail}:
    get:
      operationId: users.settings.forwardingAddresses.gmail.users.settings.forwardingAddresses.get
      description: Gets the specified forwarding address.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: forwardingEmail
          in: path
          description: The forwarding address to be retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ForwardingAddress"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    delete:
      operationId: users.settings.forwardingAddresses.gmail.users.settings.forwardingAddresses.delete
      description: Deletes the specified forwarding address and revokes any
        verification that may have been required. This method is only available
        to service account clients that have been delegated domain-wide
        authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: forwardingEmail
          in: path
          description: The forwarding address to be deleted.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
  /gmail/v1/users/{userId}/settings/delegates:
    get:
      operationId: users.settings.delegates.gmail.users.settings.delegates.list
      description: Lists the delegates for the specified account. This method is only
        available to service account clients that have been delegated
        domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ListDelegatesResponse"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    post:
      operationId: users.settings.delegates.gmail.users.settings.delegates.create
      description: Adds a delegate with its verification status set directly to
        `accepted`, without sending any verification email. The delegate user
        must be a member of the same Google Workspace organization as the
        delegator user. Gmail imposes limitations on the number of delegates and
        delegators each user in a Google Workspace organization can have. These
        limits depend on your organization, but in general each user can have up
        to 25 delegates and up to 10 delegators. Note that a delegate user must
        be referred to by their primary email address, and not an email alias.
        Also note that when a new delegate is created, there may be up to a one
        minute delay before the new delegate is available for use. This method
        is only available to service account clients that have been delegated
        domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delegate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Delegate"
        required: true
  /gmail/v1/users/{userId}/settings/delegates/{delegateEmail}:
    get:
      operationId: users.settings.delegates.gmail.users.settings.delegates.get
      description: Gets the specified delegate. Note that a delegate user must be
        referred to by their primary email address, and not an email alias. This
        method is only available to service account clients that have been
        delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: delegateEmail
          in: path
          description: The email address of the user whose delegate relationship is to be
            retrieved.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Delegate"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://mail.google.com/
            - https://www.googleapis.com/auth/gmail.modify
            - https://www.googleapis.com/auth/gmail.readonly
            - https://www.googleapis.com/auth/gmail.settings.basic
    delete:
      operationId: users.settings.delegates.gmail.users.settings.delegates.delete
      description: Removes the specified delegate (which can be of any verification
        status), and revokes any verification that may have been required for
        using it. Note that a delegate user must be referred to by their primary
        email address, and not an email alias. This method is only available to
        service account clients that have been delegated domain-wide authority.
      parameters:
        - name: userId
          in: path
          description: User's email address. The special value "me" can be used to
            indicate the authenticated user.
          required: true
          schema:
            type: string
            default: me
        - name: delegateEmail
          in: path
          description: The email address of the user to be removed as a delegate.
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful response
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
      security:
        - OAuth2:
            - https://www.googleapis.com/auth/gmail.settings.sharing
components:
  schemas:
    Draft:
      type: object
      description: A draft email in the user's mailbox.
      properties:
        id:
          type: string
          description: The immutable ID of the draft.
        message:
          $ref: "#/components/schemas/Message"
    Message:
      type: object
      description: An email message.
      properties:
        id:
          type: string
          description: The immutable ID of the message.
        threadId:
          type: string
          description: "The ID of the thread the message belongs to. To add a message or
            draft to a thread, the following criteria must be met: 1. The
            requested `threadId` must be specified on the `Message` or
            `Draft.Message` you supply with your request. 2. The `References`
            and `In-Reply-To` headers must be set in compliance with the [RFC
            2822](https://tools.ietf.org/html/rfc2822) standard. 3. The
            `Subject` headers must match. "
        labelIds:
          type: array
          description: List of IDs of labels applied to this message.
          items:
            type: string
        snippet:
          type: string
          description: A short part of the message text.
        historyId:
          type: string
          description: The ID of the last history record that modified this message.
          format: uint64
        internalDate:
          type: string
          description: The internal message creation timestamp (epoch ms), which
            determines ordering in the inbox. For normal SMTP-received email,
            this represents the time the message was originally accepted by
            Google, which is more reliable than the `Date` header. However, for
            API-migrated mail, it can be configured by client to be based on the
            `Date` header.
          format: int64
        payload:
          $ref: "#/components/schemas/MessagePart"
        sizeEstimate:
          type: integer
          description: Estimated size in bytes of the message.
          format: int32
        raw:
          type: string
          description: The entire email message in an RFC 2822 formatted and base64url
            encoded string. Returned in `messages.get` and `drafts.get`
            responses when the `format=RAW` parameter is supplied.
          format: byte
    MessagePart:
      type: object
      description: A single MIME message part.
      properties:
        partId:
          type: string
          description: The immutable ID of the message part.
        mimeType:
          type: string
          description: The MIME type of the message part.
        filename:
          type: string
          description: The filename of the attachment. Only present if this message part
            represents an attachment.
        headers:
          type: array
          description: List of headers on this message part. For the top-level message
            part, representing the entire message payload, it will contain the
            standard RFC 2822 email headers such as `To`, `From`, and `Subject`.
          items:
            $ref: "#/components/schemas/MessagePartHeader"
        body:
          $ref: "#/components/schemas/MessagePartBody"
        parts:
          type: array
          description: The child MIME message parts of this part. This only applies to
            container MIME message parts, for example `multipart/*`. For non-
            container MIME message part types, such as `text/plain`, this field
            is empty. For more information, see RFC 1521.
          items:
            $ref: "#/components/schemas/MessagePart"
    MessagePartHeader:
      type: object
      properties:
        name:
          type: string
          description: The name of the header before the `:` separator. For example, `To`.
        value:
          type: string
          description: The value of the header after the `:` separator. For example,
            `someuser@example.com`.
    MessagePartBody:
      type: object
      description: The body of a single MIME message part.
      properties:
        attachmentId:
          type: string
          description: When present, contains the ID of an external attachment that can be
            retrieved in a separate `messages.attachments.get` request. When not
            present, the entire content of the message part body is contained in
            the data field.
        size:
          type: integer
          description: Number of bytes for the message part data (encoding notwithstanding).
          format: int32
        data:
          type: string
          description: The body data of a MIME message part as a base64url encoded string.
            May be empty for MIME container types that have no message body or
            when the body data is sent as a separate attachment. An attachment
            ID is present if the body data is contained in a separate
            attachment.
          format: byte
    ListDraftsResponse:
      type: object
      properties:
        drafts:
          type: array
          description: List of drafts. Note that the `Message` property in each `Draft`
            resource only contains an `id` and a `threadId`. The messages.get
            method can fetch additional message details.
          items:
            $ref: "#/components/schemas/Draft"
        nextPageToken:
          type: string
          description: Token to retrieve the next page of results in the list.
        resultSizeEstimate:
          type: integer
          description: Estimated total number of results.
          format: uint32
    ListHistoryResponse:
      type: object
      properties:
        history:
          type: array
          description: List of history records. Any `messages` contained in the response
            will typically only have `id` and `threadId` fields populated.
          items:
            $ref: "#/components/schemas/History"
        nextPageToken:
          type: string
          description: Page token to retrieve the next page of results in the list.
        historyId:
          type: string
          description: The ID of the mailbox's current history record.
          format: uint64
    History:
      type: object
      description: A record of a change to the user's mailbox. Each history change may
        affect multiple messages in multiple ways.
      properties:
        id:
          type: string
          description: The mailbox sequence ID.
          format: uint64
        messages:
          type: array
          description: List of messages changed in this history record. The fields for
            specific change types, such as `messagesAdded` may duplicate
            messages in this field. We recommend using the specific change-type
            fields instead of this.
          items:
            $ref: "#/components/schemas/Message"
        messagesAdded:
          type: array
          description: Messages added to the mailbox in this history record.
          items:
            $ref: "#/components/schemas/HistoryMessageAdded"
        messagesDeleted:
          type: array
          description: Messages deleted (not Trashed) from the mailbox in this history
            record.
          items:
            $ref: "#/components/schemas/HistoryMessageDeleted"
        labelsAdded:
          type: array
          description: Labels added to messages in this history record.
          items:
            $ref: "#/components/schemas/HistoryLabelAdded"
        labelsRemoved:
          type: array
          description: Labels removed from messages in this history record.
          items:
            $ref: "#/components/schemas/HistoryLabelRemoved"
    HistoryMessageAdded:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/Message"
    HistoryMessageDeleted:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/Message"
    HistoryLabelAdded:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/Message"
        labelIds:
          type: array
          description: Label IDs added to the message.
          items:
            type: string
    HistoryLabelRemoved:
      type: object
      properties:
        message:
          $ref: "#/components/schemas/Message"
        labelIds:
          type: array
          description: Label IDs removed from the message.
          items:
            type: string
    BatchDeleteMessagesRequest:
      type: object
      properties:
        ids:
          type: array
          description: The IDs of the messages to delete.
          items:
            type: string
    ListMessagesResponse:
      type: object
      properties:
        messages:
          type: array
          description: List of messages. Note that each message resource contains only an
            `id` and a `threadId`. Additional message details can be fetched
            using the messages.get method.
          items:
            $ref: "#/components/schemas/Message"
        nextPageToken:
          type: string
          description: Token to retrieve the next page of results in the list.
        resultSizeEstimate:
          type: integer
          description: Estimated total number of results.
          format: uint32
    ModifyMessageRequest:
      type: object
      properties:
        addLabelIds:
          type: array
          description: A list of IDs of labels to add to this message. You can add up to
            100 labels with each update.
          items:
            type: string
        removeLabelIds:
          type: array
          description: A list IDs of labels to remove from this message. You can remove up
            to 100 labels with each update.
          items:
            type: string
    BatchModifyMessagesRequest:
      type: object
      properties:
        ids:
          type: array
          description: The IDs of the messages to modify. There is a limit of 1000 ids per
            request.
          items:
            type: string
        addLabelIds:
          type: array
          description: A list of label IDs to add to messages.
          items:
            type: string
        removeLabelIds:
          type: array
          description: A list of label IDs to remove from messages.
          items:
            type: string
    Label:
      type: object
      description: Labels are used to categorize messages and threads within the
        user's mailbox. The maximum number of labels supported for a user's
        mailbox is 10,000.
      properties:
        id:
          type: string
          description: The immutable ID of the label.
        name:
          type: string
          description: The display name of the label.
        messageListVisibility:
          type: string
          description: The visibility of messages with this label in the message list in
            the Gmail web interface.
          enum:
            - show
            - hide
        labelListVisibility:
          type: string
          description: The visibility of the label in the label list in the Gmail web
            interface.
          enum:
            - labelShow
            - labelShowIfUnread
            - labelHide
        type:
          type: string
          description: The owner type for the label. User labels are created by the user
            and can be modified and deleted by the user and can be applied to
            any message or thread. System labels are internally created and
            cannot be added, modified, or deleted. System labels may be able to
            be applied to or removed from messages and threads under some
            circumstances but this is not guaranteed. For example, users can
            apply and remove the `INBOX` and `UNREAD` labels from messages and
            threads, but cannot apply or remove the `DRAFTS` or `SENT` labels
            from messages or threads.
          enum:
            - system
            - user
        messagesTotal:
          type: integer
          description: The total number of messages with the label.
          format: int32
        messagesUnread:
          type: integer
          description: The number of unread messages with the label.
          format: int32
        threadsTotal:
          type: integer
          description: The total number of threads with the label.
          format: int32
        threadsUnread:
          type: integer
          description: The number of unread threads with the label.
          format: int32
        color:
          $ref: "#/components/schemas/LabelColor"
    LabelColor:
      type: object
      properties:
        textColor:
          type: string
          description: "The text color of the label, represented as hex string. This field
            is required in order to set the color of a label. Only the following
            predefined set of color values are allowed: \\#000000, #434343,
            #666666, #999999, #cccccc, #efefef, #f3f3f3, #ffffff, \\#fb4c2f,
            #ffad47, #fad165, #16a766, #43d692, #4a86e8, #a479e2, #f691b3,
            \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0, #c6f3de, #c9daf8, #e4d7f5,
            #fcdee8, \\#efa093, #ffd6a2, #fce8b3, #89d3b2, #a0eac9, #a4c2f4,
            #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b, #fcda83, #44b984, #68dfa9,
            #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21, #eaa041, #f2c960, #149e60,
            #3dc789, #3c78d8, #8e63ce, #e07798, \\#ac2b16, #cf8933, #d5ae49,
            #0b804b, #2a9c68, #285bac, #653e9b, #b65775, \\#822111, #a46a21,
            #aa8831, #076239, #1a764d, #1c4587, #41236d, #83334c \\#464646,
            #e7e7e7, #0d3472, #b6cff5, #0d3b44, #98d7e4, #3d188e, #e3d7ff,
            \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8, #7a2e0b, #ffc8af, #7a4706,
            #ffdeb5, \\#594c05, #fbe983, #684e07, #fdedc1, #0b4f30, #b3efd3,
            #04502e, #a2dcc1, \\#c2c2c2, #4986e7, #2da2bb, #b99aff, #994a64,
            #f691b2, #ff7537, #ffad46, \\#662e37, #ebdbde, #cca6ac, #094228,
            #42d692, #16a765"
        backgroundColor:
          type: string
          description: "The background color represented as hex string #RRGGBB (ex
            #000000). This field is required in order to set the color of a
            label. Only the following predefined set of color values are
            allowed: \\#000000, #434343, #666666, #999999, #cccccc, #efefef,
            #f3f3f3, #ffffff, \\#fb4c2f, #ffad47, #fad165, #16a766, #43d692,
            #4a86e8, #a479e2, #f691b3, \\#f6c5be, #ffe6c7, #fef1d1, #b9e4d0,
            #c6f3de, #c9daf8, #e4d7f5, #fcdee8, \\#efa093, #ffd6a2, #fce8b3,
            #89d3b2, #a0eac9, #a4c2f4, #d0bcf1, #fbc8d9, \\#e66550, #ffbc6b,
            #fcda83, #44b984, #68dfa9, #6d9eeb, #b694e8, #f7a7c0, \\#cc3a21,
            #eaa041, #f2c960, #149e60, #3dc789, #3c78d8, #8e63ce, #e07798,
            \\#ac2b16, #cf8933, #d5ae49, #0b804b, #2a9c68, #285bac, #653e9b,
            #b65775, \\#822111, #a46a21, #aa8831, #076239, #1a764d, #1c4587,
            #41236d, #83334c \\#464646, #e7e7e7, #0d3472, #b6cff5, #0d3b44,
            #98d7e4, #3d188e, #e3d7ff, \\#711a36, #fbd3e0, #8a1c0a, #f2b2a8,
            #7a2e0b, #ffc8af, #7a4706, #ffdeb5, \\#594c05, #fbe983, #684e07,
            #fdedc1, #0b4f30, #b3efd3, #04502e, #a2dcc1, \\#c2c2c2, #4986e7,
            #2da2bb, #b99aff, #994a64, #f691b2, #ff7537, #ffad46, \\#662e37,
            #ebdbde, #cca6ac, #094228, #42d692, #16a765"
    ListLabelsResponse:
      type: object
      properties:
        labels:
          type: array
          description: List of labels. Note that each label resource only contains an
            `id`, `name`, `messageListVisibility`, `labelListVisibility`, and
            `type`. The labels.get method can fetch additional label details.
          items:
            $ref: "#/components/schemas/Label"
    Profile:
      type: object
      description: Profile for a Gmail user.
      properties:
        emailAddress:
          type: string
          description: The user's email address.
        messagesTotal:
          type: integer
          description: The total number of messages in the mailbox.
          format: int32
        threadsTotal:
          type: integer
          description: The total number of threads in the mailbox.
          format: int32
        historyId:
          type: string
          description: The ID of the mailbox's current history record.
          format: uint64
    WatchRequest:
      type: object
      description: Set up or update a new push notification watch on this user's mailbox.
      properties:
        labelIds:
          type: array
          description: List of label_ids to restrict notifications about. By default, if
            unspecified, all changes are pushed out. If specified then dictates
            which labels are required for a push notification to be generated.
          items:
            type: string
        labelFilterAction:
          type: string
          description: Filtering behavior of `labelIds list` specified. This field is
            deprecated because it caused incorrect behavior in some cases; use
            `label_filter_behavior` instead.
          enum:
            - include
            - exclude
        labelFilterBehavior:
          type: string
          description: Filtering behavior of `labelIds list` specified. This field
            replaces `label_filter_action`; if set, `label_filter_action` is
            ignored.
          enum:
            - include
            - exclude
        topicName:
          type: string
          description: A fully qualified Google Cloud Pub/Sub API topic name to publish
            the events to. This topic name **must** already exist in Cloud
            Pub/Sub and you **must** have already granted gmail "publish"
            permission on it. For example,
            "projects/my-project-identifier/topics/my-topic-name" (using the
            Cloud Pub/Sub "v1" topic naming format). Note that the
            "my-project-identifier" portion must exactly match your Google
            developer project id (the one executing this watch request).
    WatchResponse:
      type: object
      description: Push notification watch response.
      properties:
        historyId:
          type: string
          description: The ID of the mailbox's current history record.
          format: uint64
        expiration:
          type: string
          description: When Gmail will stop sending notifications for mailbox updates
            (epoch millis). Call `watch` again before this time to renew the
            watch.
          format: int64
    Thread:
      type: object
      description: A collection of messages representing a conversation.
      properties:
        id:
          type: string
          description: The unique ID of the thread.
        snippet:
          type: string
          description: A short part of the message text.
        historyId:
          type: string
          description: The ID of the last history record that modified this thread.
          format: uint64
        messages:
          type: array
          description: The list of messages in the thread.
          items:
            $ref: "#/components/schemas/Message"
    ListThreadsResponse:
      type: object
      properties:
        threads:
          type: array
          description: List of threads. Note that each thread resource does not contain a
            list of `messages`. The list of `messages` for a given thread can be
            fetched using the threads.get method.
          items:
            $ref: "#/components/schemas/Thread"
        nextPageToken:
          type: string
          description: Page token to retrieve the next page of results in the list.
        resultSizeEstimate:
          type: integer
          description: Estimated total number of results.
          format: uint32
    ModifyThreadRequest:
      type: object
      properties:
        addLabelIds:
          type: array
          description: A list of IDs of labels to add to this thread. You can add up to
            100 labels with each update.
          items:
            type: string
        removeLabelIds:
          type: array
          description: A list of IDs of labels to remove from this thread. You can remove
            up to 100 labels with each update.
          items:
            type: string
    ListSendAsResponse:
      type: object
      description: Response for the ListSendAs method.
      properties:
        sendAs:
          type: array
          description: List of send-as aliases.
          items:
            $ref: "#/components/schemas/SendAs"
    SendAs:
      type: object
      description: Settings associated with a send-as alias, which can be either the
        primary login address associated with the account or a custom "from"
        address. Send-as aliases correspond to the "Send Mail As" feature in the
        web interface.
      properties:
        sendAsEmail:
          type: string
          description: The email address that appears in the "From:" header for mail sent
            using this alias. This is read-only for all operations except
            create.
        displayName:
          type: string
          description: A name that appears in the "From:" header for mail sent using this
            alias. For custom "from" addresses, when this is empty, Gmail will
            populate the "From:" header with the name that is used for the
            primary address associated with the account. If the admin has
            disabled the ability for users to update their name format, requests
            to update this field for the primary login will silently fail.
        replyToAddress:
          type: string
          description: An optional email address that is included in a "Reply-To:" header
            for mail sent using this alias. If this is empty, Gmail will not
            generate a "Reply-To:" header.
        signature:
          type: string
          description: An optional HTML signature that is included in messages composed
            with this alias in the Gmail web UI. This signature is added to new
            emails only.
        isPrimary:
          type: boolean
          description: Whether this address is the primary address used to login to the
            account. Every Gmail account has exactly one primary address, and it
            cannot be deleted from the collection of send-as aliases. This field
            is read-only.
        isDefault:
          type: boolean
          description: Whether this address is selected as the default "From:" address in
            situations such as composing a new message or sending a vacation
            auto-reply. Every Gmail account has exactly one default send-as
            address, so the only legal value that clients may write to this
            field is `true`. Changing this from `false` to `true` for an address
            will result in this field becoming `false` for the other previous
            default address.
        treatAsAlias:
          type: boolean
          description: Whether Gmail should treat this address as an alias for the user's
            primary email address. This setting only applies to custom "from"
            aliases.
        smtpMsa:
          $ref: "#/components/schemas/SmtpMsa"
        verificationStatus:
          type: string
          description: Indicates whether this address has been verified for use as a
            send-as alias. Read-only. This setting only applies to custom "from"
            aliases.
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
    SmtpMsa:
      type: object
      description: Configuration for communication with an SMTP service.
      properties:
        host:
          type: string
          description: The hostname of the SMTP service. Required.
        port:
          type: integer
          description: The port of the SMTP service. Required.
          format: int32
        username:
          type: string
          description: The username that will be used for authentication with the SMTP
            service. This is a write-only field that can be specified in
            requests to create or update SendAs settings; it is never populated
            in responses.
        password:
          type: string
          description: The password that will be used for authentication with the SMTP
            service. This is a write-only field that can be specified in
            requests to create or update SendAs settings; it is never populated
            in responses.
        securityMode:
          type: string
          description: The protocol that will be used to secure communication with the
            SMTP service. Required.
          enum:
            - securityModeUnspecified
            - none
            - ssl
            - starttls
    ListSmimeInfoResponse:
      type: object
      properties:
        smimeInfo:
          type: array
          description: List of SmimeInfo.
          items:
            $ref: "#/components/schemas/SmimeInfo"
    SmimeInfo:
      type: object
      description: An S/MIME email config.
      properties:
        id:
          type: string
          description: The immutable ID for the SmimeInfo.
        issuerCn:
          type: string
          description: The S/MIME certificate issuer's common name.
        isDefault:
          type: boolean
          description: Whether this SmimeInfo is the default one for this user's send-as
            address.
        expiration:
          type: string
          description: When the certificate expires (in milliseconds since epoch).
          format: int64
        pem:
          type: string
          description: PEM formatted X509 concatenated certificate string (standard base64
            encoding). Format used for returning key, which includes public key
            as well as certificate chain (not private key).
        pkcs12:
          type: string
          description: PKCS#12 format containing a single private/public key pair and
            certificate chain. This format is only accepted from client for
            creating a new SmimeInfo and is never returned, because the private
            key is not intended to be exported. PKCS#12 may be encrypted, in
            which case encryptedKeyPassword should be set appropriately.
          format: byte
        encryptedKeyPassword:
          type: string
          description: Encrypted key password, when key is encrypted.
    CseIdentity:
      type: object
      description: The client-side encryption (CSE) configuration for the email
        address of an authenticated user. Gmail uses CSE configurations to save
        drafts of client-side encrypted email messages, and to sign and send
        encrypted email messages.
      properties:
        emailAddress:
          type: string
          description: The email address for the sending identity. The email address must
            be the primary email address of the authenticated user.
        primaryKeyPairId:
          type: string
          description: If a key pair is associated, the ID of the key pair, CseKeyPair.
        signAndEncryptKeyPairs:
          $ref: "#/components/schemas/SignAndEncryptKeyPairs"
    SignAndEncryptKeyPairs:
      type: object
      description: The configuration of a CSE identity that uses different key pairs
        for signing and encryption.
      properties:
        signingKeyPairId:
          type: string
          description: The ID of the CseKeyPair that signs outgoing mail.
        encryptionKeyPairId:
          type: string
          description: The ID of the CseKeyPair that encrypts signed outgoing mail.
    CseKeyPair:
      type: object
      description: "A client-side encryption S/MIME key pair, which is comprised of a
        public key, its certificate chain, and metadata for its paired private
        key. Gmail uses the key pair to complete the following tasks: - Sign
        outgoing client-side encrypted messages. - Save and reopen drafts of
        client-side encrypted messages. - Save and reopen sent messages. -
        Decrypt incoming or archived S/MIME messages."
      properties:
        keyPairId:
          type: string
          description: Output only. The immutable ID for the client-side encryption S/MIME
            key pair.
        pkcs7:
          type: string
          description: Input only. The public key and its certificate chain. The chain
            must be in [PKCS#7](https://en.wikipedia.org/wiki/PKCS_7) format and
            use PEM encoding and ASCII armor.
        pem:
          type: string
          description: Output only. The public key and its certificate chain, in
            [PEM](https://en.wikipedia.org/wiki/Privacy-Enhanced_Mail) format.
        subjectEmailAddresses:
          type: array
          description: Output only. The email address identities that are specified on the
            leaf certificate.
          items:
            type: string
        enablementState:
          type: string
          description: Output only. The current state of the key pair.
          enum:
            - stateUnspecified
            - enabled
            - disabled
        disableTime:
          type: string
          description: Output only. If a key pair is set to `DISABLED`, the time that the
            key pair's state changed from `ENABLED` to `DISABLED`. This field is
            present only when the key pair is in state `DISABLED`.
          format: google-datetime
        privateKeyMetadata:
          type: array
          description: Metadata for instances of this key pair's private key.
          items:
            $ref: "#/components/schemas/CsePrivateKeyMetadata"
    CsePrivateKeyMetadata:
      type: object
      description: Metadata for a private key instance.
      properties:
        privateKeyMetadataId:
          type: string
          description: Output only. The immutable ID for the private key metadata instance.
        kaclsKeyMetadata:
          $ref: "#/components/schemas/KaclsKeyMetadata"
        hardwareKeyMetadata:
          $ref: "#/components/schemas/HardwareKeyMetadata"
    KaclsKeyMetadata:
      type: object
      description: Metadata for private keys managed by an external key access control
        list service. For details about managing key access, see [Google
        Workspace CSE API
        Reference](https://developers.google.com/workspace/cse/reference).
      properties:
        kaclsUri:
          type: string
          description: The URI of the key access control list service that manages the
            private key.
        kaclsData:
          type: string
          description: "Opaque data generated and used by the key access control list
            service. Maximum size: 8 KiB."
    HardwareKeyMetadata:
      type: object
      description: Metadata for hardware keys.
      properties:
        description:
          type: string
          description: Description about the hardware key.
    DisableCseKeyPairRequest:
      type: object
      description: Requests to turn off a client-side encryption key pair.
      properties: {}
    EnableCseKeyPairRequest:
      type: object
      description: Requests to turn on a client-side encryption key pair.
      properties: {}
    ListCseIdentitiesResponse:
      type: object
      properties:
        cseIdentities:
          type: array
          description: One page of the list of CSE identities configured for the user.
          items:
            $ref: "#/components/schemas/CseIdentity"
        nextPageToken:
          type: string
          description: Pagination token to be passed to a subsequent ListCseIdentities
            call in order to retrieve the next page of identities. If this value
            is not returned or is the empty string, then no further pages
            remain.
    ListCseKeyPairsResponse:
      type: object
      properties:
        cseKeyPairs:
          type: array
          description: One page of the list of CSE key pairs installed for the user.
          items:
            $ref: "#/components/schemas/CseKeyPair"
        nextPageToken:
          type: string
          description: Pagination token to be passed to a subsequent ListCseKeyPairs call
            in order to retrieve the next page of key pairs. If this value is
            not returned, then no further pages remain.
    ObliterateCseKeyPairRequest:
      type: object
      description: Request to obliterate a CSE key pair.
      properties: {}
    ListFiltersResponse:
      type: object
      description: Response for the ListFilters method.
      properties:
        filter:
          type: array
          description: List of a user's filters.
          items:
            $ref: "#/components/schemas/Filter"
    Filter:
      type: object
      description: Resource definition for Gmail filters. Filters apply to specific
        messages instead of an entire email thread.
      properties:
        id:
          type: string
          description: The server assigned ID of the filter.
        criteria:
          $ref: "#/components/schemas/FilterCriteria"
        action:
          $ref: "#/components/schemas/FilterAction"
    FilterCriteria:
      type: object
      description: Message matching criteria.
      properties:
        from:
          type: string
          description: The sender's display name or email address.
        to:
          type: string
          description: The recipient's display name or email address. Includes recipients
            in the "to", "cc", and "bcc" header fields. You can use simply the
            local part of the email address. For example, "example" and
            "example@" both match "example@gmail.com". This field is
            case-insensitive.
        subject:
          type: string
          description: Case-insensitive phrase found in the message's subject. Trailing
            and leading whitespace are be trimmed and adjacent spaces are
            collapsed.
        query:
          type: string
          description: 'Only return messages matching the specified query. Supports the
            same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`.'
        negatedQuery:
          type: string
          description: 'Only return messages not matching the specified query. Supports
            the same query format as the Gmail search box. For example,
            `"from:someuser@example.com rfc822msgid: is:unread"`.'
        hasAttachment:
          type: boolean
          description: Whether the message has any attachment.
        excludeChats:
          type: boolean
          description: Whether the response should exclude chats.
        size:
          type: integer
          description: The size of the entire RFC822 message in bytes, including all
            headers and attachments.
          format: int32
        sizeComparison:
          type: string
          description: How the message size in bytes should be in relation to the size
            field.
          enum:
            - unspecified
            - smaller
            - larger
    FilterAction:
      type: object
      description: A set of actions to perform on a message.
      properties:
        addLabelIds:
          type: array
          description: List of labels to add to the message.
          items:
            type: string
        removeLabelIds:
          type: array
          description: List of labels to remove from the message.
          items:
            type: string
        forward:
          type: string
          description: Email address that the message should be forwarded to.
    ImapSettings:
      type: object
      description: IMAP settings for an account.
      properties:
        enabled:
          type: boolean
          description: Whether IMAP is enabled for the account.
        autoExpunge:
          type: boolean
          description: If this value is true, Gmail will immediately expunge a message
            when it is marked as deleted in IMAP. Otherwise, Gmail will wait for
            an update from the client before expunging messages marked as
            deleted.
        expungeBehavior:
          type: string
          description: The action that will be executed on a message when it is marked as
            deleted and expunged from the last visible IMAP folder.
          enum:
            - expungeBehaviorUnspecified
            - archive
            - trash
            - deleteForever
        maxFolderSize:
          type: integer
          description: An optional limit on the number of messages that an IMAP folder may
            contain. Legal values are 0, 1000, 2000, 5000 or 10000. A value of
            zero is interpreted to mean that there is no limit.
          format: int32
    PopSettings:
      type: object
      description: POP settings for an account.
      properties:
        accessWindow:
          type: string
          description: The range of messages which are accessible via POP.
          enum:
            - accessWindowUnspecified
            - disabled
            - fromNowOn
            - allMail
        disposition:
          type: string
          description: The action that will be executed on a message after it has been
            fetched via POP.
          enum:
            - dispositionUnspecified
            - leaveInInbox
            - archive
            - trash
            - markRead
    VacationSettings:
      type: object
      description: Vacation auto-reply settings for an account. These settings
        correspond to the "Vacation responder" feature in the web interface.
      properties:
        enableAutoReply:
          type: boolean
          description: Flag that controls whether Gmail automatically replies to messages.
        responseSubject:
          type: string
          description: Optional text to prepend to the subject line in vacation responses.
            In order to enable auto-replies, either the response subject or the
            response body must be nonempty.
        responseBodyPlainText:
          type: string
          description: Response body in plain text format. If both
            `response_body_plain_text` and `response_body_html` are specified,
            `response_body_html` will be used.
        responseBodyHtml:
          type: string
          description: Response body in HTML format. Gmail will sanitize the HTML before
            storing it. If both `response_body_plain_text` and
            `response_body_html` are specified, `response_body_html` will be
            used.
        restrictToContacts:
          type: boolean
          description: Flag that determines whether responses are sent to recipients who
            are not in the user's list of contacts.
        restrictToDomain:
          type: boolean
          description: Flag that determines whether responses are sent to recipients who
            are outside of the user's domain. This feature is only available for
            Google Workspace users.
        startTime:
          type: string
          description: An optional start time for sending auto-replies (epoch ms). When
            this is specified, Gmail will automatically reply only to messages
            that it receives after the start time. If both `startTime` and
            `endTime` are specified, `startTime` must precede `endTime`.
          format: int64
        endTime:
          type: string
          description: An optional end time for sending auto-replies (epoch ms). When this
            is specified, Gmail will automatically reply only to messages that
            it receives before the end time. If both `startTime` and `endTime`
            are specified, `startTime` must precede `endTime`.
          format: int64
    LanguageSettings:
      type: object
      description: Language settings for an account. These settings correspond to the
        "Language settings" feature in the web interface.
      properties:
        displayLanguage:
          type: string
          description: The language to display Gmail in, formatted as an RFC 3066 Language
            Tag (for example `en-GB`, `fr` or `ja` for British English, French,
            or Japanese respectively). The set of languages supported by Gmail
            evolves over time, so please refer to the "Language" dropdown in the
            Gmail settings for all available options, as described in the
            language settings help article. A table of sample values is also
            provided in the Managing Language Settings guide Not all Gmail
            clients can display the same set of languages. In the case that a
            user's display language is not available for use on a particular
            client, said client automatically chooses to display in the closest
            supported variant (or a reasonable default).
    ListForwardingAddressesResponse:
      type: object
      description: Response for the ListForwardingAddresses method.
      properties:
        forwardingAddresses:
          type: array
          description: List of addresses that may be used for forwarding.
          items:
            $ref: "#/components/schemas/ForwardingAddress"
    ForwardingAddress:
      type: object
      description: Settings for a forwarding address.
      properties:
        forwardingEmail:
          type: string
          description: An email address to which messages can be forwarded.
        verificationStatus:
          type: string
          description: Indicates whether this address has been verified and is usable for
            forwarding. Read-only.
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
    AutoForwarding:
      type: object
      description: Auto-forwarding settings for an account.
      properties:
        enabled:
          type: boolean
          description: Whether all incoming mail is automatically forwarded to another
            address.
        emailAddress:
          type: string
          description: Email address to which all incoming messages are forwarded. This
            email address must be a verified member of the forwarding addresses.
        disposition:
          type: string
          description: The state that a message should be left in after it has been
            forwarded.
          enum:
            - dispositionUnspecified
            - leaveInInbox
            - archive
            - trash
            - markRead
    ListDelegatesResponse:
      type: object
      description: Response for the ListDelegates method.
      properties:
        delegates:
          type: array
          description: List of the user's delegates (with any verification status). If an
            account doesn't have delegates, this field doesn't appear.
          items:
            $ref: "#/components/schemas/Delegate"
    Delegate:
      type: object
      description: Settings for a delegate. Delegates can read, send, and delete
        messages, as well as view and add contacts, for the delegator's account.
        See "Set up mail delegation" for more information about delegates.
      properties:
        delegateEmail:
          type: string
          description: The email address of the delegate.
        verificationStatus:
          type: string
          description: Indicates whether this address has been verified and can act as a
            delegate for the account. Read-only.
          enum:
            - verificationStatusUnspecified
            - accepted
            - pending
            - rejected
            - expired
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: https://accounts.google.com/o/oauth2/v2/auth
          tokenUrl: https://oauth2.googleapis.com/token
          scopes:
            https://mail.google.com/: Read, compose, send, and permanently delete all your
              email from Gmail
            https://www.googleapis.com/auth/gmail.addons.current.action.compose: Manage drafts and send emails when you interact with the add-on
            https://www.googleapis.com/auth/gmail.addons.current.message.action: View your email messages when you interact with the add-on
            https://www.googleapis.com/auth/gmail.addons.current.message.metadata: View your email message metadata when the add-on is running
            https://www.googleapis.com/auth/gmail.addons.current.message.readonly: View your email messages when the add-on is running
            https://www.googleapis.com/auth/gmail.compose: Manage drafts and send emails
            https://www.googleapis.com/auth/gmail.insert: Add emails into your Gmail mailbox
            https://www.googleapis.com/auth/gmail.labels: See and edit your email labels
            https://www.googleapis.com/auth/gmail.metadata: View your email message metadata
              such as labels and headers, but not the email body
            https://www.googleapis.com/auth/gmail.modify: Read, compose, and send emails from your Gmail account
            https://www.googleapis.com/auth/gmail.readonly: View your email messages and settings
            https://www.googleapis.com/auth/gmail.send: Send email on your behalf
            https://www.googleapis.com/auth/gmail.settings.basic: See, edit, create, or
              change your email settings and filters in Gmail
            https://www.googleapis.com/auth/gmail.settings.sharing: Manage your sensitive
              mail settings, including who can manage your mail
